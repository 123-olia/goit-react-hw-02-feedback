{"version":3,"sources":["Components/Stats/Stats.module.scss","Components/Feedback/Feedback.module.scss","Components/Section/Section.module.scss","Components/Feedback/FeedbackEditor.js","Components/Stats/Stats.js","Components/Notification/Notification.js","Components/Section/Section.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FeedbackEditor","onClickGood","onClickNeutral","onClickBad","type","onClick","className","styles","btn","Stats","good","neutral","bad","total","positivePercentage","title","list","item","defaultProps","Notification","notif","notification","message","Section","children","App","state","onGood","setState","prevState","countTotalFeedback","onNeutral","onBad","Object","values","reduce","a","b","countPositiveFeedbackPercentage","Math","round","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,KAAO,oBAAoB,aAAe,8B,gBCAzFD,EAAOC,QAAU,CAAC,IAAM,wB,oBCAxBD,EAAOC,QAAU,CAAC,MAAQ,yB,+MCkBXC,EAhBQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,eAAgBC,EAAhC,EAAgCA,WAAhC,OACrB,6BACE,4BAAQC,KAAK,SAASC,QAASJ,EAAaK,UAAWC,IAAOC,KAA9D,QAIA,4BAAQJ,KAAK,SAASC,QAASH,EAAgBI,UAAWC,IAAOC,KAAjE,WAIA,4BAAQJ,KAAK,SAASC,QAASF,EAAYG,UAAWC,IAAOC,KAA7D,S,gBCTEC,EAAQ,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC1C,OACE,6BACE,2BAAOR,UAAWC,IAAOQ,OAAzB,cAEA,wBAAIT,UAAWC,IAAOS,MACpB,wBAAIV,UAAWC,IAAOU,MAAtB,SAAmCP,GACnC,wBAAIJ,UAAWC,IAAOU,MAAtB,YAAsCN,EAAtC,KACA,wBAAIL,UAAWC,IAAOU,MAAtB,QAAkCL,EAAlC,KACA,wBAAIN,UAAWC,IAAOU,MAAtB,UAAoCJ,EAApC,KACA,wBAAIP,UAAWC,IAAOU,MAAtB,sBACsBH,EADtB,QAQOL,IASfA,EAAMS,aAAe,CACnBR,KAAM,EACNC,QAAS,EACTC,IAAK,GC9BP,IAAMO,EAAe,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACtB,OAAO,uBAAGd,UAAWC,IAAOc,cAAeD,IAG9BD,IAMfA,EAAaD,aAAe,CAC1BI,QAAS,e,oBCHIC,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUT,EAAY,EAAZA,MAC3B,OACE,iCACE,wBAAIT,UAAWC,IAAOQ,OAAQA,GAC7BS,ICCcC,E,4MACnBC,MAAQ,CACNhB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPe,OAAS,WAEP,EAAKC,UAAS,SAACC,GACb,MAAO,CACLnB,KAAMmB,EAAUnB,KAAO,MAI3B,EAAKoB,sB,EAGPC,UAAY,WAGV,EAAKH,UAAS,SAACC,GACb,MAAO,CACLlB,QAASkB,EAAUlB,QAAU,MAIjC,EAAKmB,sB,EAGPE,MAAQ,WAGN,EAAKJ,UAAS,SAACC,GACb,MAAO,CACLjB,IAAKiB,EAAUjB,IAAM,MAIzB,EAAKkB,sB,EAGPA,mBAAqB,WAGnB,OAFYG,OAAOC,OAAO,EAAKR,OAAOS,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,I,EAKhEC,gCAAkC,WAChC,IAAIzB,EAAQ,EAAKiB,qBACjB,OAAOjB,EAAQ,EAAI0B,KAAKC,MAAO,EAAKd,MAAMhB,KAAOG,EAAS,KAAO,K,uDAIjE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,CAASS,MAAM,yBACb,kBAAC,EAAD,CACEd,YAAawC,KAAKd,OAClBzB,eAAgBuC,KAAKV,UACrB5B,WAAYsC,KAAKT,QAGlBS,KAAKX,qBAAuB,EAC3B,kBAAC,EAAD,CACEpB,KAAM+B,KAAKf,MAAMhB,KACjBC,QAAS8B,KAAKf,MAAMf,QACpBC,IAAK6B,KAAKf,MAAMd,IAChBC,MAAO4B,KAAKX,qBACZhB,mBAAoB2B,KAAKH,oCAG3B,kBAAC,EAAD,CAAclB,MAAM,4B,GAxECsB,aCIbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMtC,c","file":"static/js/main.ee6611db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Stats_title__2buIL\",\"item\":\"Stats_item__3Qq6n\",\"notification\":\"Stats_notification__22XFB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Feedback_btn__1Mzwg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__1WjGT\"};","import React from \"react\";\r\nimport styles from \"./Feedback.module.scss\";\r\n\r\nconst FeedbackEditor = ({ onClickGood, onClickNeutral, onClickBad }) => (\r\n  <div>\r\n    <button type=\"button\" onClick={onClickGood} className={styles.btn}>\r\n      Good\r\n    </button>\r\n\r\n    <button type=\"button\" onClick={onClickNeutral} className={styles.btn}>\r\n      Neutral\r\n    </button>\r\n\r\n    <button type=\"button\" onClick={onClickBad} className={styles.btn}>\r\n      Bad\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default FeedbackEditor;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Stats.module.scss\";\r\n\r\nconst Stats = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <div>\r\n      <title className={styles.title}>Statistics</title>\r\n\r\n      <ul className={styles.list}>\r\n        <li className={styles.item}>Good: {good}</li>\r\n        <li className={styles.item}>Neutral: {neutral} </li>\r\n        <li className={styles.item}>Bad: {bad} </li>\r\n        <li className={styles.item}>Total: {total} </li>\r\n        <li className={styles.item}>\r\n          Positive feedback: {positivePercentage}%\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stats;\r\n\r\nStats.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number,\r\n};\r\n\r\nStats.defaultProps = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"../Stats/Stats.module.scss\";\r\n\r\nconst Notification = ({ notif }) => {\r\n  return <p className={styles.notification}>{notif}</p>;\r\n};\r\n\r\nexport default Notification;\r\n\r\nNotification.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nNotification.defaultProps = {\r\n  message: \"No feedback\",\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./Section.module.scss\";\r\n\r\nconst Section = ({ children, title }) => {\r\n  return (\r\n    <section>\r\n      <h2 className={styles.title}>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport FeedbackEditor from \"./Components/Feedback/FeedbackEditor\";\nimport Stats from \"./Components/Stats/Stats\";\nimport Notification from \"./Components/Notification/Notification.js\";\nimport Section from \"./Components/Section/Section\";\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onGood = () => {\n    // console.log(this.state.good);\n    this.setState((prevState) => {\n      return {\n        good: prevState.good + 1,\n      };\n    });\n\n    this.countTotalFeedback();\n  };\n\n  onNeutral = () => {\n    // console.log(this.state.neutral);\n\n    this.setState((prevState) => {\n      return {\n        neutral: prevState.neutral + 1,\n      };\n    });\n\n    this.countTotalFeedback();\n  };\n\n  onBad = () => {\n    // console.log(this.state.bad);\n\n    this.setState((prevState) => {\n      return {\n        bad: prevState.bad + 1,\n      };\n    });\n\n    this.countTotalFeedback();\n  };\n\n  countTotalFeedback = () => {\n    let total = Object.values(this.state).reduce((a, b) => a + b, 0);\n    // console.log(total);\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    let total = this.countTotalFeedback();\n    return total > 0 ? Math.round((this.state.good / total) * 100) : \"0\";\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Section title=\"Please leave feedback\">\n          <FeedbackEditor\n            onClickGood={this.onGood}\n            onClickNeutral={this.onNeutral}\n            onClickBad={this.onBad}\n          />\n\n          {this.countTotalFeedback() > 0 ? (\n            <Stats\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification notif=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}